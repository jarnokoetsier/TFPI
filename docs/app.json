[{"name":"app.R","content":"\r\nlibrary(tidyverse)\r\nlibrary(stringi)\r\nlibrary(plotly)\r\nlibrary(DT)\r\nlibrary(shiny)\r\nlibrary(shinyWidgets)\r\nlibrary(shinycssloaders)\r\nlibrary(shinythemes)\r\nlibrary(stringdist)\r\n\r\nload(\"TFPIinfo.RData\")\r\n\r\n################################################################################\r\n#  UI                                             \r\n################################################################################\r\nui <- fluidPage(theme = shinytheme(\"spacelab\"),\r\n                setBackgroundColor(\"black\"),\r\n                tags$head(tags$style(HTML(\"\r\n                           .navbar-nav {\r\n                           float: none !important;\r\n                           }\r\n                           .navbar-nav > li:nth-child(6) {\r\n                           float: right;\r\n                           }\r\n                           .my_style_1{ \r\n                             background-image: url(Background1.jpg);\r\n                           }\r\n                           \r\n                           .my_style_1 { margin-top: -20px; }\r\n                           \r\n                           .my_style_1 { width: 100%; }\r\n                           \r\n                           .container-fluid { padding-left: 0; padding-right: 0; }\r\n                           \r\n                           .my_style_1 { position: absolute; left: 0; }\r\n                           \r\n                           \"))),\r\n                \r\n                \r\n                fluidPage(\r\n                  useSweetAlert(),\r\n                  \r\n                  navbarPage(title = \"\", id = \"navbar\",\r\n                             tabPanel(\"  \", \r\n                                      value = \"TFPI\",\r\n                                      navlistPanel(\r\n                                        tabPanel(\"Summary information\", value = \"summary\",\r\n                                                 \r\n                                                 uiOutput(\"summary_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"summaryDensity\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"400px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 hr(),\r\n                                                 \r\n                                                 dataTableOutput(\"summaryTable\",\r\n                                                                 width = \"1000px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\")\r\n                                                 \r\n                                        ),\r\n                                        tabPanel(\"DNA sequence\", value = \"DNAseq\",\r\n                                                 \r\n                                                 uiOutput(\"DNAseq_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"DNAseq\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"300px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 \r\n                                                 uiOutput(\"DNAseq_slider_ui\")\r\n                                                 \r\n                                        ),\r\n                                        tabPanel(\"Nucleotide Coordinate Plot\", value = \"NuCo\",\r\n                                                 \r\n                                                 uiOutput(\"NuCo_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"NuCo\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\")\r\n                                                 \r\n                                        ),\r\n                                        tabPanel(\"Nucleotide Walk Plot\", value = \"NuWa\",\r\n                                                 uiOutput(\"NuWa_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"NuWa\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\") %>% \r\n                                                   withSpinner(color=\"#FFFFFF\")\r\n                                        ),\r\n                                        \r\n                                        tabPanel(\"Chaos Game\", value = \"Chaos\",\r\n                                                 uiOutput(\"ChGa_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"ChGa\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\") %>% \r\n                                                   withSpinner(color=\"#FFFFFF\")\r\n                                        )\r\n                                      )\r\n                             )))\r\n)\r\n\r\n################################################################################\r\n# Server                                         \r\n################################################################################\r\nserver <- function(input, output, session) {\r\n  \r\n  \r\n  #Retrieve nucleotide sequence\r\n  seqData <- reactive({\r\n    seqData <- TFPIinfo[,c(3,1,5,2)]\r\n    colnames(seqData) <- c(\"Gene\", \"SeqName\", \"Biotype\", \"Sequence\")\r\n    return(seqData)\r\n  })\r\n  \r\n  \r\n  #******************************************************************************#\r\n  # Summary Information\r\n  #******************************************************************************#\r\n  \r\n  output$summary_SelectIsoform_ui <- renderUI({\r\n    \r\n    selectInput(inputId = \"summary_SelectIsoform\", \r\n                label = NULL,\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1],\r\n                multiple = FALSE)\r\n  })\r\n  \r\n  seqTable <- reactive({\r\n    req(input$summary_SelectIsoform)\r\n    seq <- seqData()$Sequence[seqData()$SeqName  %in% input$summary_SelectIsoform]\r\n    sequence <- str_split(seq, \"\")[[1]]\r\n    seqTable <- data.frame(table(sequence))\r\n    seqTable$Percentage <- paste0(round((seqTable$Freq/sum(seqTable$Freq))*100,2), \"%\")\r\n    colnames(seqTable) <- c(\"Nucleotide\", \"Frequency\", \"Percentage\")\r\n    seqTable$Frequency <- as.character(seqTable$Frequency)\r\n    return(seqTable)\r\n  })\r\n  \r\n  output$summaryTable <- renderDataTable({\r\n    req(seqTable())\r\n    return(seqTable())\r\n  }, options = list(dom = 't'), rownames = FALSE, selection = \"none\")\r\n  \r\n  output$summaryDensity <- renderPlotly({\r\n    req(input$summary_SelectIsoform)\r\n    \r\n    seq <- seqData()$Sequence[seqData()$SeqName %in% input$summary_SelectIsoform]\r\n    sequence <- str_split(seq, \"\")[[1]]\r\n    \r\n    plotSeq <- data.frame(Nucleotide = sequence, \r\n                          Position = 1:length(sequence))\r\n    \r\n    \r\n    plot <- ggplot(plotSeq, aes(x = Position, color = Nucleotide, fill = Nucleotide)) +\r\n      geom_density(alpha = 0.5) +\r\n      ylab(\"Density\") +\r\n      xlab(\"Position\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text = element_text(colour = \"white\"),\r\n            axis.title = element_text(colour = \"white\"),\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\"))\r\n    \r\n    ggplotly(plot, tooltip = \"Position\")\r\n  })\r\n  \r\n  \r\n  \r\n  #******************************************************************************#\r\n  # DNA sequence plot\r\n  #******************************************************************************#\r\n  \r\n  output$DNAseq_SelectIsoform_ui <- renderUI({\r\n    \r\n    selectInput(inputId = \"DNAseq_SelectIsoform\", \r\n                label = NULL,\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1],\r\n                multiple = FALSE)\r\n  })\r\n  \r\n  output$DNAseq_slider_ui <- renderUI({\r\n    req(input$DNAseq_SelectIsoform)\r\n    sliderInput(inputId = \"DNAseq_slider\", \r\n                label = NULL,\r\n                min = 0,\r\n                max = nchar(seqData()$Sequence[seqData()$SeqName  %in% input$DNAseq_SelectIsoform]),\r\n                value = 20,\r\n                width = \"1000px\")\r\n  })\r\n  \r\n  slider <- reactive({\r\n    input$DNAseq_slider\r\n  }) %>% debounce(1000)\r\n  \r\n  output$DNAseq <- renderPlotly({\r\n    req(input$DNAseq_SelectIsoform)\r\n    req(slider())\r\n    seq <- seqData()$Sequence[seqData()$SeqName  %in% input$DNAseq_SelectIsoform]\r\n    sequence <- str_split(seq, \"\")[[1]]\r\n    \r\n    plotSeq <- data.frame(Nucleotide = sequence, \r\n                          Position = 1:length(sequence), \r\n                          Y = rep (1,length(sequence)))\r\n    \r\n    plot <- ggplot(plotSeq, aes(x = Position, y = Y)) +\r\n      geom_point(aes(color = Nucleotide), shape = 15, size = 5, alpha = 0.7) +\r\n      geom_text(aes(label = Nucleotide)) +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            legend.position = \"none\",\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\"))\r\n    \r\n    ggplotly(plot, tooltip = \"Position\") %>%\r\n      config(plot, modeBarButtonsToRemove = c(\"zoom\", \"select\", \"zoomIn\", \"zoomOut\", \"lasso2d\", \"autoScale\")) %>% \r\n      layout(xaxis = list(range = c(slider() - 20, slider() + 20)),\r\n             dragmode = \"pan\")\r\n  })\r\n  \r\n  \r\n  #******************************************************************************#\r\n  # Nucleotide coordinate plot\r\n  #******************************************************************************#\r\n  \r\n  output$NuCo_SelectIsoform_ui <- renderUI({\r\n    \r\n    if (nrow(seqData()) > 5){\r\n      select <- 5 \r\n    } else{\r\n      select <- nrow(seqData())\r\n    }\r\n    \r\n    selectInput(inputId = \"NuCo_SelectIsoform\", \r\n                label = NULL,\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1:select],\r\n                multiple = TRUE)\r\n  })\r\n  \r\n  output$NuCo <- renderPlotly({\r\n    req(input$NuCo_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName  %in% input$NuCo_SelectIsoform,c(4,2)]\r\n    Nt_order <- c(\"G\", \"A\", \"T\", \"C\") #ENWS\r\n    \r\n    for (j in 1:nrow(seq)){\r\n      nuc_seq <- seq[j,1]\r\n      seq_split <- strsplit(nuc_seq, \"\" )\r\n      seq_plot <- cbind.data.frame(rep(0,length(seq_split[[1]])), \r\n                                   rep(0,length(seq_split[[1]])), \r\n                                   c(1:length(seq_split[[1]])),\r\n                                   rep(seq[j,2],length(seq_split[[1]])))\r\n      \r\n      colnames(seq_plot) <- c(\"X\", \"Y\",\"Position\", \"Isoform\")\r\n      \r\n      for (i in 1:length(seq_split[[1]])){\r\n        if (seq_split[[1]][i] == Nt_order[1]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1]) + 1\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2])\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[1])\r\n        }\r\n        if (seq_split[[1]][i] == Nt_order[2]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1])\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) + 1\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[2])\r\n        }\r\n        if (seq_split[[1]][i] == Nt_order[3]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1]) - 1\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2])\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[3])\r\n        }\r\n        \r\n        if (seq_split[[1]][i] == Nt_order[4]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1])\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) - 1\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[4])\r\n        }\r\n      }\r\n      \r\n      if (j == 1){\r\n        seq_plot1 <- seq_plot\r\n      } else{\r\n        seq_plot1 <- rbind(seq_plot1, seq_plot)\r\n      }\r\n    }\r\n    \r\n    annotations <- data.frame(\r\n      xpos = c(max(seq_plot1$X)+(max(seq_plot1$X) - min(seq_plot1$X))*0.1,\r\n               0.5*(min(seq_plot1$X) + max(seq_plot1$X)),\r\n               min(seq_plot1$X)-(max(seq_plot1$X) - min(seq_plot1$X))*0.1,\r\n               0.5*(min(seq_plot1$X) + max(seq_plot1$X))),\r\n      ypos =  c(0.5*(min(seq_plot1$Y) + max(seq_plot1$Y)), \r\n                max(seq_plot1$Y) +(max(seq_plot1$Y) - min(seq_plot1$Y))*0.1,\r\n                0.5*(min(seq_plot1$Y) + max(seq_plot1$Y)),\r\n                min(seq_plot1$Y)-(max(seq_plot1$Y) - min(seq_plot1$Y))*0.1),\r\n      annotateText = Nt_order,  \r\n      hjustvar = c(0,0,1,1),\r\n      vjustvar = c(0,1,0,1))\r\n    \r\n    \r\n    plot <- ggplot(seq_plot1, aes(x = X, y = Y, label = Position)) +\r\n      geom_path(aes(color = Isoform)) +\r\n      geom_text(data=annotations,\r\n                aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = \"white\") +\r\n      geom_point(x = 0, y = 0, size = 2, color = \"red\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    \r\n    ggplotly(plot, tooltip = c(\"X\", \"Y\", \"Isoform\", \"Position\"))\r\n  })\r\n  \r\n  \r\n  \r\n  #******************************************************************************#\r\n  # Nucleotide Walk plot\r\n  #******************************************************************************#\r\n  \r\n  output$NuWa_SelectIsoform_ui <- renderUI({\r\n    selectInput(inputId = \"NuWa_SelectIsoform\", \r\n                label = NULL,\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1])\r\n  })\r\n  \r\n  \r\n  output$NuWa <- renderPlotly({\r\n    req(input$NuWa_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName  %in% input$NuWa_SelectIsoform,c(4,2)]\r\n    \r\n    for (j in 1:4){\r\n      Nucleotide <- c(\"A\", \"T\", \"C\", \"G\")\r\n      nuc_seq <- seq[,1]\r\n      seq_split <- strsplit(nuc_seq, \"\" )\r\n      seq_plot <- cbind.data.frame(c(1:length(seq_split[[1]])), \r\n                                   rep(0,length(seq_split[[1]])),\r\n                                   rep(Nucleotide[j],length(seq_split[[1]])))\r\n      \r\n      colnames(seq_plot) <- c(\"Position\", \"Sum\", \"Nucleotide\")\r\n      \r\n      nt_perc <- table(seq_split[[1]])/length(seq_split[[1]])\r\n      nt_perc <- nt_perc/(1-nt_perc)\r\n      \r\n      for (i in 1:length(seq_split[[1]])){\r\n        if (seq_split[[1]][i] == Nucleotide[j]) {\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) + 1 #+ 3\r\n        }else{\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) - nt_perc[Nucleotide[j]]#- 1\r\n        }\r\n      }\r\n      \r\n      if (j == 1){\r\n        seq_plot1 <- seq_plot\r\n      } else{\r\n        seq_plot1 <- rbind(seq_plot1, seq_plot)\r\n      }\r\n    }\r\n    \r\n    \r\n    plot <- ggplot(seq_plot1, aes(x = Position, y = Sum)) +\r\n      geom_hline(yintercept = 0, color = \"white\") +\r\n      geom_line(aes(color = Nucleotide)) +\r\n      geom_point(x = 0, y = 0, size = 2, color = \"red\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            #legend.position = \"none\",\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    \r\n    ggplotly(plot, tooltip = c(\"Sum\",\"Nucleotide\", \"Position\"))\r\n    \r\n    \r\n    \r\n    \r\n  })\r\n  \r\n  #******************************************************************************#\r\n  # Chaos Game\r\n  #******************************************************************************#\r\n  \r\n  output$ChGa_SelectIsoform_ui <- renderUI({\r\n    selectInput(inputId = \"ChGa_SelectIsoform\", \r\n                label = NULL,\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1])\r\n  })\r\n  \r\n  \r\n  output$ChGa <- renderPlotly({\r\n    req(input$ChGa_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName %in% input$ChGa_SelectIsoform,c(4,2)]\r\n    seq_split <- strsplit(seq[,1], \"\")[[1]]\r\n    \r\n    plotData <- cbind.data.frame(rep(0,length(seq_split) + 1), rep(0,length(seq_split) + 1))\r\n    colnames(plotData) <- c(\"X\", \"Y\")\r\n    \r\n    \r\n    G <- c(1, 1)\r\n    C <- c(1, -1)\r\n    A <- c(-1, -1)\r\n    T <- c(-1, 1)\r\n    \r\n    for (i in 1:length(seq_split)){\r\n      if (seq_split[i] == \"G\"){\r\n        plotData[i+1,] <- 0.5*(G - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"C\"){\r\n        plotData[i+1,] <- 0.5*(C - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"A\"){\r\n        plotData[i+1,] <- 0.5*(A - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"T\"){\r\n        plotData[i+1,] <- 0.5*(T - plotData[i,]) + plotData[i,]\r\n      }\r\n    }\r\n    plotData$Position <- rep(0:(nrow(plotData)-1))\r\n    \r\n    annotations <- data.frame(\r\n      xpos = c(max(plotData$X) + 0.1*max(plotData$X),\r\n               max(plotData$X) + 0.1*max(plotData$X),\r\n               min(plotData$X) - 0.1*max(plotData$X),\r\n               min(plotData$X) - 0.1*max(plotData$X)),\r\n      ypos =  c(min(plotData$Y) - 0.1*max(plotData$X), \r\n                max(plotData$Y) + 0.1*max(plotData$X),\r\n                max(plotData$Y) + 0.1*max(plotData$X),\r\n                min(plotData$Y) - 0.1*max(plotData$X)),\r\n      annotateText = c(\"C\", \"G\", \"T\", \"A\"),  \r\n      hjustvar = c(0,0,1,1),\r\n      vjustvar = c(0,1,0,1))\r\n    \r\n    \r\n    plot <-ggplot(plotData, aes(x = X, y = Y, color = Position)) + \r\n      geom_point(shape = 16, size = 0.5) + \r\n      geom_text(data=annotations,\r\n                aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = \"white\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            legend.position = \"none\",\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      scale_color_viridis_c(option = \"plasma\") +\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    ggplotly(plot, tooltip = c(\"X\",\"Y\", \"Position\"))\r\n    \r\n    \r\n  })\r\n  \r\n}\r\n\r\n################################################################################\r\n# Run App                                         \r\n################################################################################\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"TFPIinfo.RData","content":"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\ne4eeVXV/BnqlNoDC5N9zZB6gDzDz0s85T019Le6YhENr25rHO9SObTSp9MhsuB9MPRs7GcBj\nAaJXSAUIm9r35mkFW6PAjFJRaDGyXP+7lemMn5XQg1ARouZq/CjW+dziXOrRATcYMNF5JICl\nz9JCFTPJR/QMP8eVjJEKHvSb9NpEwxrNuk3tDhD6BSGUXHntUKUOVeq5qlJCvYO2uzryg7ar\nZO19Ay+oOGi7B203DtruQds9aLsHbfeg7R603YO2+//Sdn/JwPltkXgP3fGhO/7fd8fG7vrm\nabh65vefITKffXhK/HPR5yC8fj1xT0H+D8o5KXxQYL+6GnMoHl+KtKqw/dnzCof9Jf2/CYeE\n+4IJp0D504E8Pof5X1Iy6L+VPS35FE9IaaY7jJUDvRAhUABRUqSH9oXvif7q1naA2kQUY3XL\n7p/FyGieKyzVwF0VyjJfalPh0r+Ve237t2efi9fPzuv1X//2D3Wdr9Mbp7e+3Yev2qbnwxtv\nHx+fnlw9fHz7+vHp1cMn12/fuH3l8Mnp6fHNW1fPvn7n1u3POHxyfOPk6iCnd05Ob928evj0\nzvU7x1cHuXn6mRM8vXnj+MZnHL59++Tq2LvFn75957JtHp89vffw/OzB3YfnTx8/Otfh1z5+\n/Ojp2cPzu/cfPXh4/sE36uiVJT/7r2W/fH7vo7MnMtN3dPAnZ399evb4/N6Hd58+vnf+5P7j\nhx8/vbud6JS8/+D8nl5/788fnN+/++STj9579KFveXb+5Oyj9z68+8HZ+dndhw90+Mc+fGHQ\n9eGPLhx87+Gjp598fHZppq88fvSXtzzbH+x+Xvzb7tenn376r8tLuv/hvSdekg+++uDe03tv\nvf94W8TR0b+3n/8A2XjEq1RcAAA=","type":"binary"},{"name":"prepareData.R","content":"\r\n# Select biomaRt dataset\r\nensembl = useMart(\"ensembl\")\r\nensembl = useDataset(\"hsapiens_gene_ensembl\",mart=ensembl)\r\n\r\n# Get annotations\r\nTFPIinfo <- getBM(attributes=c(\"hgnc_symbol\",\r\n                               \"ensembl_gene_id\",\r\n                               \"ensembl_transcript_id\",\r\n                               \"transcript_biotype\",\r\n                               \"external_transcript_name\",\r\n                               \"cdna\"), \r\n                  filters = 'hgnc_symbol',\r\n                  values = \"TFPI\",\r\n                  mart = ensembl)\r\n\r\nsave(TFPIinfo, file = \"TFPIinfo.RData\")","type":"text"}]
