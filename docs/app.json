[{"name":"app.R","content":"# info: https://www.nature.com/articles/nrclinonc.2015.108\r\nlibrary(tidyverse)\r\nlibrary(stringi)\r\nlibrary(plotly)\r\nlibrary(DT)\r\nlibrary(shiny)\r\nlibrary(shinyWidgets)\r\nlibrary(shinycssloaders)\r\nlibrary(shinythemes)\r\nlibrary(stringdist)\r\nlibrary(prompter)\r\n\r\nload(\"TFPIinfo.RData\")\r\n\r\n################################################################################\r\n#  UI                                             \r\n################################################################################\r\nui <- fluidPage(theme = shinytheme(\"spacelab\"),\r\n                setBackgroundColor(\"black\"),\r\n                tags$head(tags$style(HTML(\"\r\n                           .navbar-nav {\r\n                           float: none !important;\r\n                           }\r\n                           .navbar-nav > li:nth-child(6) {\r\n                           float: right;\r\n                           }\r\n                           .my_style_1{ \r\n                             background-image: url(Background1.jpg);\r\n                           }\r\n                           \r\n                           .my_style_1 { margin-top: -20px; }\r\n                           \r\n                           .my_style_1 { width: 100%; }\r\n                           \r\n                           .container-fluid { padding-left: 0; padding-right: 0; }\r\n                           \r\n                           .my_style_1 { position: absolute; left: 0; }\r\n                           \r\n                           table.dataTable thead th { color: white;  }\r\n                           \r\n                           \"))),\r\n                \r\n                \r\n                fluidPage(\r\n                  # This allow for pop-up messages to show up\r\n                  shinyWidgets::useSweetAlert(),\r\n                  \r\n                  navbarPage(title = \"\", id = \"navbar\",\r\n                             tabPanel(\"  \", \r\n                                      value = \"TFPI\",\r\n                                      navlistPanel(\r\n                                        tabPanel(\"Summary information\", value = \"summary\",\r\n                                                 \r\n                                                 uiOutput(\"summary_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"summaryDensity\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"400px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 hr(),\r\n                                                 \r\n                                                 dataTableOutput(\"summaryTable\",\r\n                                                                 width = \"1000px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\")\r\n                                                 \r\n                                        ),\r\n                                        tabPanel(\"Nucleotide Coordinate Plot\", value = \"NuCo\",\r\n                                                 \r\n                                                 uiOutput(\"NuCo_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"NuCo\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\")%>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 \r\n                                                 actionButton(inputId = \"NuCo_info\",\r\n                                                            label = NULL,\r\n                                                            icon = icon(\"fas fa-info\"))\r\n                                                 \r\n                                        ),\r\n                                        tabPanel(\"Nucleotide Walk Plot\", value = \"NuWa\",\r\n                                                 uiOutput(\"NuWa_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"NuWa\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\") %>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 \r\n                                                 actionButton(inputId = \"NuWa_info\",\r\n                                                              label = NULL,\r\n                                                              icon = icon(\"fas fa-info\"))\r\n                                        ),\r\n                                        \r\n                                        tabPanel(\"Chaos Game\", value = \"Chaos\",\r\n                                                 uiOutput(\"ChGa_SelectIsoform_ui\"),\r\n                                                 \r\n                                                 plotlyOutput(\"ChGa\", \r\n                                                              width = \"1000px\", \r\n                                                              height=\"600px\") %>% \r\n                                                   withSpinner(color=\"#FFFFFF\"),\r\n                                                 \r\n                                                 actionButton(inputId = \"ChGa_info\",\r\n                                                              label = NULL,\r\n                                                              icon = icon(\"fas fa-info\"))\r\n                                        )\r\n                                      )\r\n                             )))\r\n)\r\n\r\n################################################################################\r\n# Server                                         \r\n################################################################################\r\nserver <- function(input, output, session) {\r\n  \r\n  \r\n  #Retrieve nucleotide sequence\r\n  seqData <- reactive({\r\n    seqData <- TFPIinfo[,c(3,1,5,2)]\r\n    colnames(seqData) <- c(\"Gene\", \"SeqName\", \"Biotype\", \"Sequence\")\r\n    return(seqData)\r\n  })\r\n  \r\n  \r\n  #******************************************************************************#\r\n  # Summary Information\r\n  #******************************************************************************#\r\n  \r\n  output$summary_SelectIsoform_ui <- renderUI({\r\n    \r\n    selectInput(inputId = \"summary_SelectIsoform\", \r\n                label = \"Select TFPI isoform\",\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1],\r\n                multiple = FALSE)\r\n  })\r\n  \r\n  seqTable <- reactive({\r\n    req(input$summary_SelectIsoform)\r\n    seq <- seqData()$Sequence[seqData()$SeqName  %in% input$summary_SelectIsoform]\r\n    sequence <- str_split(seq, \"\")[[1]]\r\n    seqTable <- data.frame(table(sequence))\r\n    seqTable$Percentage <- paste0(round((seqTable$Freq/sum(seqTable$Freq))*100,2), \"%\")\r\n    colnames(seqTable) <- c(\"Nucleotide\", \"Frequency\", \"Percentage\")\r\n    seqTable$Frequency <- as.character(seqTable$Frequency)\r\n    return(seqTable)\r\n  })\r\n  \r\n  output$summaryTable <- renderDataTable({ \r\n    req(seqTable()) \r\n    datatable(seqTable(), \r\n              options = list(dom = 't'), \r\n              rownames = FALSE, \r\n              selection = \"none\") %>% \r\n      formatStyle(columns = colnames(seqTable()), color = 'white') \r\n    })\r\n  \r\n  output$summaryDensity <- renderPlotly({\r\n    req(input$summary_SelectIsoform)\r\n    \r\n    seq <- seqData()$Sequence[seqData()$SeqName %in% input$summary_SelectIsoform]\r\n    sequence <- str_split(seq, \"\")[[1]]\r\n    \r\n    plotSeq <- data.frame(Nucleotide = sequence, \r\n                          Position = 1:length(sequence))\r\n    \r\n    \r\n    plot <- ggplot(plotSeq, aes(x = Position, color = Nucleotide, fill = Nucleotide)) +\r\n      geom_density(alpha = 0.5) +\r\n      ylab(\"Density\") +\r\n      xlab(\"Position\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x = element_text(colour = \"white\"),\r\n            axis.text.y = element_blank(),\r\n            axis.ticks.y = element_blank(),\r\n            axis.title = element_text(colour = \"white\"),\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\"))\r\n    \r\n    ggplotly(plot, tooltip = \"Position\")\r\n  })\r\n  \r\n  \r\n  #******************************************************************************#\r\n  # Nucleotide coordinate plot\r\n  #******************************************************************************#\r\n  \r\n  output$NuCo_SelectIsoform_ui <- renderUI({\r\n    \r\n    if (nrow(seqData()) > 5){\r\n      select <- 5 \r\n    } else{\r\n      select <- nrow(seqData())\r\n    }\r\n    \r\n    selectInput(inputId = \"NuCo_SelectIsoform\", \r\n                label = \"Select TFPI isoform(s)\",\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1:select],\r\n                multiple = TRUE)\r\n  })\r\n  \r\n  output$NuCo <- renderPlotly({\r\n    req(input$NuCo_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName  %in% input$NuCo_SelectIsoform,c(4,2)]\r\n    Nt_order <- c(\"G\", \"A\", \"T\", \"C\") #ENWS\r\n    \r\n    for (j in 1:nrow(seq)){\r\n      nuc_seq <- seq[j,1]\r\n      seq_split <- strsplit(nuc_seq, \"\" )\r\n      seq_plot <- cbind.data.frame(rep(0,length(seq_split[[1]])), \r\n                                   rep(0,length(seq_split[[1]])), \r\n                                   c(1:length(seq_split[[1]])),\r\n                                   rep(seq[j,2],length(seq_split[[1]])))\r\n      \r\n      colnames(seq_plot) <- c(\"X\", \"Y\",\"Position\", \"Isoform\")\r\n      \r\n      for (i in 1:length(seq_split[[1]])){\r\n        if (seq_split[[1]][i] == Nt_order[1]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1]) + 1\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2])\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[1])\r\n        }\r\n        if (seq_split[[1]][i] == Nt_order[2]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1])\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) + 1\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[2])\r\n        }\r\n        if (seq_split[[1]][i] == Nt_order[3]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1]) - 1\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2])\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[3])\r\n        }\r\n        \r\n        if (seq_split[[1]][i] == Nt_order[4]) {\r\n          seq_plot[i,1] <- sum(seq_plot[(i-1),1])\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) - 1\r\n          seq_plot[i,3] <- paste0(seq_plot[i,3], \"/\", Nt_order[4])\r\n        }\r\n      }\r\n      \r\n      if (j == 1){\r\n        seq_plot1 <- seq_plot\r\n      } else{\r\n        seq_plot1 <- rbind(seq_plot1, seq_plot)\r\n      }\r\n    }\r\n    \r\n    annotations <- data.frame(\r\n      xpos = c(max(seq_plot1$X)+(max(seq_plot1$X) - min(seq_plot1$X))*0.1,\r\n               0.5*(min(seq_plot1$X) + max(seq_plot1$X)),\r\n               min(seq_plot1$X)-(max(seq_plot1$X) - min(seq_plot1$X))*0.1,\r\n               0.5*(min(seq_plot1$X) + max(seq_plot1$X))),\r\n      ypos =  c(0.5*(min(seq_plot1$Y) + max(seq_plot1$Y)), \r\n                max(seq_plot1$Y) +(max(seq_plot1$Y) - min(seq_plot1$Y))*0.1,\r\n                0.5*(min(seq_plot1$Y) + max(seq_plot1$Y)),\r\n                min(seq_plot1$Y)-(max(seq_plot1$Y) - min(seq_plot1$Y))*0.1),\r\n      annotateText = Nt_order,  \r\n      hjustvar = c(0,0,1,1),\r\n      vjustvar = c(0,1,0,1))\r\n    \r\n    \r\n    plot <- ggplot(seq_plot1, aes(x = X, y = Y, label = Position)) +\r\n      geom_path(aes(color = Isoform)) +\r\n      geom_text(data=annotations,\r\n                aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = \"white\") +\r\n      geom_point(x = 0, y = 0, size = 2, color = \"red\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    \r\n    ggplotly(plot, tooltip = c(\"X\", \"Y\", \"Isoform\", \"Position\"))\r\n  })\r\n  \r\n\r\n  observeEvent(input$NuCo_info,{\r\n    shinyWidgets::sendSweetAlert(\r\n      session = session,\r\n      title = \"Nucleotide Coordinate Plot\",\r\n      text = \"Starting at the origin, the walk is moved by one position \r\n      for each sequential base, up for 'A', left for 'T', right for G and down for C, \r\n      to produce a trace.\",\r\n      type = \"info\")\r\n  })\r\n  #******************************************************************************#\r\n  # Nucleotide Walk plot\r\n  #******************************************************************************#\r\n  \r\n  output$NuWa_SelectIsoform_ui <- renderUI({\r\n    selectInput(inputId = \"NuWa_SelectIsoform\", \r\n                label = \"Select TFPI isoform\",\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1])\r\n  })\r\n  \r\n  \r\n  output$NuWa <- renderPlotly({\r\n    req(input$NuWa_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName  %in% input$NuWa_SelectIsoform,c(4,2)]\r\n    \r\n    for (j in 1:4){\r\n      Nucleotide <- c(\"A\", \"T\", \"C\", \"G\")\r\n      nuc_seq <- seq[,1]\r\n      seq_split <- strsplit(nuc_seq, \"\" )\r\n      seq_plot <- cbind.data.frame(c(1:length(seq_split[[1]])), \r\n                                   rep(0,length(seq_split[[1]])),\r\n                                   rep(Nucleotide[j],length(seq_split[[1]])))\r\n      \r\n      colnames(seq_plot) <- c(\"Position\", \"Sum\", \"Nucleotide\")\r\n      \r\n      nt_perc <- table(seq_split[[1]])/length(seq_split[[1]])\r\n      nt_perc <- nt_perc/(1-nt_perc)\r\n      \r\n      for (i in 1:length(seq_split[[1]])){\r\n        if (seq_split[[1]][i] == Nucleotide[j]) {\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) + 1 #+ 3\r\n        }else{\r\n          seq_plot[i,2] <- sum(seq_plot[(i-1),2]) - nt_perc[Nucleotide[j]]#- 1\r\n        }\r\n      }\r\n      \r\n      if (j == 1){\r\n        seq_plot1 <- seq_plot\r\n      } else{\r\n        seq_plot1 <- rbind(seq_plot1, seq_plot)\r\n      }\r\n    }\r\n    \r\n    \r\n    plot <- ggplot(seq_plot1, aes(x = Position, y = Sum)) +\r\n      geom_hline(yintercept = 0, color = \"white\") +\r\n      geom_line(aes(color = Nucleotide)) +\r\n      geom_point(x = 0, y = 0, size = 2, color = \"red\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            #legend.position = \"none\",\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    \r\n    ggplotly(plot, tooltip = c(\"Sum\",\"Nucleotide\", \"Position\"))\r\n    \r\n    \r\n    \r\n    \r\n  })\r\n  \r\n  observeEvent(input$NuWa_info,{\r\n    shinyWidgets::sendSweetAlert(\r\n      session = session,\r\n      title = \"Nucleotide Walk Plot\",\r\n      text = \"Starting from the left, we move up if the nucleotide is present at \r\n      that position and move down if the nucleotide is absent. The walk is normalized, \r\n      meaning that it starts and ends at 0. This way, we can see the differences in \r\n      nucleotide density across the cDNA sequence.\",\r\n      type = \"info\")\r\n  })\r\n  \r\n  #******************************************************************************#\r\n  # Chaos Game\r\n  #******************************************************************************#\r\n  \r\n  output$ChGa_SelectIsoform_ui <- renderUI({\r\n    selectInput(inputId = \"ChGa_SelectIsoform\", \r\n                label = \"Select TFPI isoform\",\r\n                choices = seqData()$SeqName,\r\n                selected = seqData()$SeqName[1])\r\n  })\r\n  \r\n  \r\n  output$ChGa <- renderPlotly({\r\n    req(input$ChGa_SelectIsoform)\r\n    seq <- seqData()[seqData()$SeqName %in% input$ChGa_SelectIsoform,c(4,2)]\r\n    seq_split <- strsplit(seq[,1], \"\")[[1]]\r\n    \r\n    plotData <- cbind.data.frame(rep(0,length(seq_split) + 1), rep(0,length(seq_split) + 1))\r\n    colnames(plotData) <- c(\"X\", \"Y\")\r\n    \r\n    \r\n    G <- c(1, 1)\r\n    C <- c(1, -1)\r\n    A <- c(-1, -1)\r\n    T <- c(-1, 1)\r\n    \r\n    for (i in 1:length(seq_split)){\r\n      if (seq_split[i] == \"G\"){\r\n        plotData[i+1,] <- 0.5*(G - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"C\"){\r\n        plotData[i+1,] <- 0.5*(C - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"A\"){\r\n        plotData[i+1,] <- 0.5*(A - plotData[i,]) + plotData[i,]\r\n      }\r\n      if (seq_split[i] == \"T\"){\r\n        plotData[i+1,] <- 0.5*(T - plotData[i,]) + plotData[i,]\r\n      }\r\n    }\r\n    plotData$Position <- rep(0:(nrow(plotData)-1))\r\n    \r\n    annotations <- data.frame(\r\n      xpos = c(max(plotData$X) + 0.1*max(plotData$X),\r\n               max(plotData$X) + 0.1*max(plotData$X),\r\n               min(plotData$X) - 0.1*max(plotData$X),\r\n               min(plotData$X) - 0.1*max(plotData$X)),\r\n      ypos =  c(min(plotData$Y) - 0.1*max(plotData$X), \r\n                max(plotData$Y) + 0.1*max(plotData$X),\r\n                max(plotData$Y) + 0.1*max(plotData$X),\r\n                min(plotData$Y) - 0.1*max(plotData$X)),\r\n      annotateText = c(\"C\", \"G\", \"T\", \"A\"),  \r\n      hjustvar = c(0,0,1,1),\r\n      vjustvar = c(0,1,0,1))\r\n    \r\n    \r\n    plot <-ggplot(plotData, aes(x = X, y = Y, color = Position)) + \r\n      geom_point(shape = 16, size = 0.5) + \r\n      geom_text(data=annotations,\r\n                aes(x=xpos,y=ypos,hjust=hjustvar,vjust=vjustvar,label=annotateText), color = \"white\") +\r\n      theme(panel.border = element_blank(),\r\n            axis.text.x=element_blank(),\r\n            axis.ticks.x=element_blank(), \r\n            axis.text.y=element_blank(),\r\n            axis.ticks.y=element_blank(),\r\n            legend.position = \"none\",\r\n            panel.grid.major = element_blank(),\r\n            panel.grid.minor = element_blank(),\r\n            panel.background = element_rect(fill = \"black\", color = \"black\"),\r\n            plot.background = element_rect(fill = \"black\"),\r\n            legend.background = element_rect(color = \"black\", fill = \"black\"),\r\n            legend.title = element_blank(),\r\n            legend.text = element_text(colour = \"white\"),\r\n            plot.title = element_text(colour = \"white\")\r\n      )+\r\n      scale_color_viridis_c(option = \"plasma\") +\r\n      xlab(NULL) +\r\n      ylab(NULL)\r\n    \r\n    ggplotly(plot, tooltip = c(\"X\",\"Y\", \"Position\"))\r\n    \r\n    \r\n  })\r\n  \r\n  observeEvent(input$ChGa_info,{\r\n    shinyWidgets::sendSweetAlert(\r\n      session = session,\r\n      title = \"Chaos Game\",\r\n      text = \"Starting at the centre, we move half the distance \r\n      towards the corner corresponding to the first base in the cDNA sequence \r\n      and plotted this point, and then moved half the distance from that point \r\n      towards the corner corresponding to the second base, again plotting a point \r\n      at the location arrived at. This process continues until the end of the sequence \r\n      is reached\",\r\n      type = \"info\")\r\n  })\r\n  \r\n}\r\n\r\n################################################################################\r\n# Run App                                         \r\n################################################################################\r\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"TFPIinfo.RData","content":"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","type":"binary"},{"name":"prepareData.R","content":"\r\n# Select biomaRt dataset\r\nensembl = useMart(\"ensembl\")\r\nensembl = useDataset(\"hsapiens_gene_ensembl\",mart=ensembl)\r\n\r\n# Get annotations\r\nTFPIinfo <- getBM(attributes=c(\"hgnc_symbol\",\r\n                               \"ensembl_gene_id\",\r\n                               \"ensembl_transcript_id\",\r\n                               \"transcript_biotype\",\r\n                               \"external_transcript_name\",\r\n                               \"cdna\"), \r\n                  filters = 'hgnc_symbol',\r\n                  values = \"TFPI\",\r\n                  mart = ensembl)\r\n\r\nsave(TFPIinfo, file = \"TFPIinfo.RData\")\r\n\r\nsetwd(\"E:/R_projects/DNAnalysis\")\r\nshinylive::export(appdir = \"TFPI\", destdir = \"docs\")","type":"text"}]
